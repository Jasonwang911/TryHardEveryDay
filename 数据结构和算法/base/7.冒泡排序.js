// 第一层循环从左往右依次对比相邻两个元素之间的大小关系，对相邻两元素进行排序，然后向后移动指针
// 第二层循环从数组的第二项开始对比依旧进行大小交换和指针移动 
// 冒泡排序又叫下沉排序，最大的数会最先完成排序
/*
*   1. 外层循环： 递减
*   第k次执行循环执行后，前k大的值顺序排列在位置i
*   循环执行后，位置以及它右边的值处于排序状态
*   2. 内层循环： 递加
*   每次循环结束时控制变量j指向0-j元素中最大的值
*/

// 抽象
// function bubble_sort(A) 
// A: 需要排序的数组
// 返回: 无

// 交换函数
function swap(A, i, j) {
  const t = A[i]
  A[i] = A[j]
  A[j] = t
}

function bubble_sort(A) {  // 执行次数 O(n2)
  for(let i = A.length; i >= 0; i--) {  // 外层循环递减    执行了N-1次
    for(let j = 0; j <= i; j++) {  // 内层循环递加    执行了i次
      // 内层循环结束的时候，j指向A[0]~A[j]项中最大得值
      A[j-1] > A[j] && swap(A, j-1, j)
    }
    // 外层循环结束的时候， A[i]~A[n-1]已排序
  }
}


const A = [5,8,1,3,2,7, 4,6]
bubble_sort(A)
console.log(A)


